import * as dotenv from 'dotenv';
import { SignatureClient } from '../src';

// Carrega vari√°veis de ambiente
dotenv.config();

async function demonstrateDownloadAndPreview() {
  const client = new SignatureClient({
    baseURL: process.env.API_BASE_URL!,
    apiToken: process.env.API_TOKEN!,
  });

  try {
    console.log('üîç Demonstra√ß√£o: Download e Preview de Documentos\n');

    // Exemplo com IDs fict√≠cios - substitua pelos IDs reais da sua API
    const envelopeId = 'envelope-123';
    const documentId = 'document-456';

    // 1. Download de documento assinado
    console.log('üì• Fazendo download de documento assinado...');
    try {
      const downloadUrl = await client.downloadSignedDocument(documentId);
      console.log(`‚úÖ URL de download obtida: ${downloadUrl}\n`);
    } catch (error) {
      console.log(`‚ùå Erro no download: ${error instanceof Error ? error.message : error}\n`);
    }

    // 2. Preview de documento
    console.log('üëÅÔ∏è Obtendo preview do documento...');
    try {
      const preview = await client.getDocumentPreview(documentId, {
        width: 800,
        height: 600,
        page: 1,
        format: 'png'
      });
      console.log(`‚úÖ Preview gerado:`);
      console.log(`   URL: ${preview.preview_url}`);
      console.log(`   Expira em: ${preview.expires_at}\n`);
    } catch (error) {
      console.log(`‚ùå Erro no preview: ${error instanceof Error ? error.message : error}\n`);
    }

    // 3. Gera√ß√£o de ZIP com todos os documentos
    console.log('üì¶ Gerando ZIP com todos os documentos do envelope...');
    try {
      const zipJob = await client.generateEnvelopeZip(envelopeId);
      console.log(`‚úÖ Job de ZIP criado: ${zipJob.jobId}`);

      // Monitora o status da gera√ß√£o
      let attempts = 0;
      const maxAttempts = 10;
      
      while (attempts < maxAttempts) {
        const status = await client.getZipStatus(zipJob.jobId);
        console.log(`üìä Status do ZIP: ${status.status}`);

        if (status.status === 'completed') {
          console.log(`‚úÖ ZIP pronto para download!`);
          console.log(`   URL: ${status.download_url}`);
          console.log(`   Expira em: ${status.expires_at}`);
          
          // Faz o download do ZIP
          const zipDownloadUrl = await client.downloadEnvelopeZip(zipJob.jobId);
          console.log(`üì• URL final de download: ${zipDownloadUrl}\n`);
          break;
        } else if (status.status === 'failed') {
          console.log(`‚ùå Falha na gera√ß√£o do ZIP: ${status.error_message}\n`);
          break;
        } else {
          console.log(`‚è≥ Aguardando... (tentativa ${attempts + 1}/${maxAttempts})`);
          await new Promise(resolve => setTimeout(resolve, 2000)); // Aguarda 2 segundos
        }
        
        attempts++;
      }

      if (attempts >= maxAttempts) {
        console.log(`‚è∞ Timeout: ZIP n√£o foi gerado dentro do tempo limite\n`);
      }
    } catch (error) {
      console.log(`‚ùå Erro na gera√ß√£o do ZIP: ${error instanceof Error ? error.message : error}\n`);
    }

    // 4. Cancelamento de envelope com motivo
    console.log('‚ùå Cancelando envelope com motivo...');
    try {
      const canceledEnvelope = await client.cancelEnvelope(
        envelopeId, 
        'Cancelado para demonstra√ß√£o do SDK',
        true // Notificar signat√°rios
      );
      console.log(`‚úÖ Envelope cancelado:`);
      console.log(`   ID: ${canceledEnvelope.id}`);
      console.log(`   Status: ${canceledEnvelope.status}`);
      console.log(`   Motivo: ${(canceledEnvelope as any).cancellation_reason}\n`);
    } catch (error) {
      console.log(`‚ùå Erro no cancelamento: ${error instanceof Error ? error.message : error}\n`);
    }

  } catch (error) {
    console.error('‚ùå Erro na demonstra√ß√£o:', error);
  }
}

// Executa a demonstra√ß√£o se este arquivo for executado diretamente
if (require.main === module) {
  demonstrateDownloadAndPreview()
    .then(() => {
      console.log('‚úÖ Demonstra√ß√£o conclu√≠da!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro fatal:', error);
      process.exit(1);
    });
}

export { demonstrateDownloadAndPreview };